{"version":3,"sources":["../src/actions/getInference.ts","../src/providers/topics.ts","../src/service.ts","../src/config.ts","../src/test/test.ts","../src/index.ts"],"sourcesContent":["import {\n  type ActionExample,\n  elizaLogger,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  type State,\n  type Action,\n  type Content,\n} from \"@elizaos/core\";\nimport { randomUUID } from \"crypto\";\nimport { topicsProvider } from \"../providers/topics.js\";\nimport { AlloraService } from \"../service.js\";\n\nexport const getInferenceAction: Action = {\n  name: \"GET_INFERENCE\",\n  similes: [\n    \"GET_ALLORA_INFERENCE\",\n    \"GET_TOPIC_INFERENCE\",\n    \"ALLORA_INFERENCE\",\n    \"TOPIC_INFERENCE\",\n  ],\n  validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n    return true;\n  },\n  description: \"Get inference from Allora Network\",\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback: HandlerCallback,\n  ) => {\n    // Initialize or update state\n    let currentState = state;\n    if (!currentState) {\n      currentState = (await runtime.composeState(message)) as State;\n    } else {\n      currentState = await runtime.updateRecentMessageState(currentState);\n    }\n\n    // Get Allora topics information from the provider\n    currentState.alloraTopics = await topicsProvider.get(\n      runtime,\n      message,\n      currentState,\n    );\n\n    // For now, we'll just get the first active topic\n    const topics = currentState.alloraTopics?.data?.topics || [];\n    const activeTopic = topics.find((topic: any) => topic.is_active);\n\n    if (!activeTopic) {\n      const content: Content = {\n        text: \"There is no active Allora Network topic available at the moment.\",\n        source: \"@elizaos-plugins/allora\",\n      };\n      callback(content);\n      return;\n    }\n\n    elizaLogger.info(\n      `Retrieving inference for topic ID: ${activeTopic.topic_id}`,\n    );\n\n    try {\n      // Get Allora service and client\n      const alloraService = runtime.getService(\n        \"allora-service\",\n      ) as AlloraService;\n      if (!alloraService || !alloraService.isInitialized()) {\n        const content: Content = {\n          text: \"Allora service is not initialized. Please check your configuration.\",\n          source: \"@elizaos-plugins/allora\",\n        };\n        callback(content);\n        return;\n      }\n\n      const alloraApiClient = alloraService.getClient();\n      const inferenceRes = await alloraApiClient.getInferenceByTopicID(\n        activeTopic.topic_id,\n      );\n      const inferenceValue =\n        inferenceRes.inference_data.network_inference_normalized;\n\n      const responseText = `Inference provided by Allora Network on topic ${activeTopic.topic_name} (Topic ID: ${activeTopic.topic_id}): ${inferenceValue}`;\n\n      const content: Content = {\n        text: responseText,\n        source: \"@elizaos-plugins/allora\",\n      };\n      callback(content);\n\n      await runtime.createMemory({\n        id: randomUUID(),\n        entityId: message.entityId,\n        agentId: runtime.agentId,\n        roomId: message.roomId,\n        content: {\n          text: responseText,\n          source: \"@elizaos-plugins/allora\",\n        },\n        metadata: {\n          type: \"action_response\",\n          actionName: \"GET_INFERENCE\",\n          topicId: activeTopic.topic_id,\n          topicName: activeTopic.topic_name,\n          inferenceValue: inferenceValue,\n        },\n        createdAt: Date.now(),\n      });\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      const displayMessage = `There was an error fetching the inference from Allora Network: ${errorMessage}`;\n\n      elizaLogger.error(displayMessage);\n\n      const content: Content = {\n        text: displayMessage,\n        source: \"@elizaos-plugins/allora\",\n      };\n      callback(content);\n    }\n  },\n  examples: [\n    [\n      {\n        name: \"{{user1}}\",\n        content: {\n          text: \"What is the predicted ETH price in 5 minutes?\",\n        },\n      },\n      {\n        name: \"{{user2}}\",\n        content: {\n          text: \"I'll get the inference now...\",\n          action: \"GET_INFERENCE\",\n        },\n      },\n      {\n        name: \"{{user2}}\",\n        content: {\n          text: \"Inference provided by Allora Network on topic ETH 5min (ID: 13): 3393.364326646801085508\",\n        },\n      },\n    ],\n    [\n      {\n        name: \"{{user1}}\",\n        content: {\n          text: \"What is the predicted price of gold in 24 hours?\",\n        },\n      },\n      {\n        name: \"{{user2}}\",\n        content: {\n          text: \"I'll get the inference now...\",\n          action: \"GET_INFERENCE\",\n        },\n      },\n      {\n        name: \"{{user2}}\",\n        content: {\n          text: \"There is no active Allora Network topic available at the moment.\",\n        },\n      },\n    ],\n  ] as ActionExample[][],\n} as Action;\n","import {\n  elizaLogger,\n  type IAgentRuntime,\n  type Memory,\n  type Provider,\n  type State,\n} from \"@elizaos/core\";\nimport NodeCache from \"node-cache\";\nimport { type AlloraTopic } from \"@alloralabs/allora-sdk\";\nimport { AlloraService } from \"../service.js\";\n\nconst cache = new NodeCache({ stdTTL: 30 * 60 });\n\nconst getAlloraTopics = async (\n  runtime: IAgentRuntime,\n): Promise<AlloraTopic[]> => {\n  const cacheKey = \"allora-topics\";\n  const cachedValue = cache.get<AlloraTopic[]>(cacheKey);\n\n  if (cachedValue) {\n    elizaLogger.info(\"Retrieving Allora topics from cache\");\n    return cachedValue;\n  }\n\n  const alloraService = runtime.getService(\"allora-service\") as AlloraService;\n  if (!alloraService || !alloraService.isInitialized()) {\n    elizaLogger.error(\"Allora service is not initialized\");\n    return [];\n  }\n\n  const alloraApiClient = alloraService.getClient();\n  const alloraTopics = await alloraApiClient.getAllTopics();\n\n  cache.set(cacheKey, alloraTopics);\n\n  return alloraTopics;\n};\n\nexport const topicsProvider: Provider = {\n  name: \"alloraTopics\",\n  get: async (runtime: IAgentRuntime, message: Memory, state: State) => {\n    const alloraTopics = await getAlloraTopics(runtime);\n\n    let output = \"Allora Network Topics: \\n\";\n    for (const topic of alloraTopics) {\n      output += `Topic Name: ${topic.topic_name}\\n`;\n      output += `Topic Description: ${topic.description}\\n`;\n      output += `Topic ID: ${topic.topic_id}\\n`;\n      output += `Topic is Active: ${topic.is_active}\\n`;\n      output += `Topic Updated At: ${topic.updated_at}\\n`;\n      output += \"\\n\";\n    }\n\n    return {\n      data: {\n        topics: alloraTopics,\n        count: alloraTopics.length,\n      },\n      values: {\n        activeTopics: alloraTopics.filter((topic) => topic.is_active).length,\n        totalTopics: alloraTopics.length,\n      },\n      text: output,\n    };\n  },\n};\n","import { Service, type IAgentRuntime, elizaLogger } from \"@elizaos/core\";\nimport { AlloraAPIClient, type ChainSlug } from \"@alloralabs/allora-sdk\";\nimport { validateAlloraConfig, type AlloraConfig } from \"./config.js\";\n\nexport class AlloraService extends Service {\n  static serviceType: string = \"allora-service\";\n\n  public config: AlloraConfig;\n  private alloraClient: AlloraAPIClient | null = null;\n\n  constructor(runtime: IAgentRuntime) {\n    super(runtime);\n    this.config = validateAlloraConfig(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime) {\n    const service = new AlloraService(runtime);\n    await service.initialize();\n    return service;\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      this.alloraClient = new AlloraAPIClient({\n        chainSlug: this.config.ALLORA_CHAIN_SLUG as ChainSlug,\n        apiKey: this.config.ALLORA_API_KEY,\n      });\n      elizaLogger.info(\"Allora service initialized successfully\");\n    } catch (error) {\n      elizaLogger.error(\"Failed to initialize Allora service:\", error);\n      throw error;\n    }\n  }\n\n  async stop(): Promise<void> {\n    this.alloraClient = null;\n    elizaLogger.info(\"Allora service stopped\");\n  }\n\n  get capabilityDescription(): string {\n    return \"Allora Network integration for fetching topic inferences and predictions\";\n  }\n\n  getClient(): AlloraAPIClient {\n    if (!this.alloraClient) {\n      throw new Error(\"Allora client not initialized\");\n    }\n    return this.alloraClient;\n  }\n\n  isInitialized(): boolean {\n    return this.alloraClient !== null;\n  }\n\n  getStatus(): string {\n    return this.isInitialized() ? \"initialized\" : \"not initialized\";\n  }\n}\n","import { z } from \"zod\";\nimport { type IAgentRuntime } from \"@elizaos/core\";\n\nexport const ConfigSchema = z.object({\n  ALLORA_API_KEY: z.string().min(1, \"Allora API key is required\"),\n  ALLORA_CHAIN_SLUG: z.string().min(1, \"Allora chain slug is required\"),\n});\n\nexport type AlloraConfig = z.infer<typeof ConfigSchema>;\n\nexport function validateAlloraConfig(runtime: IAgentRuntime): AlloraConfig {\n  const config = {\n    ALLORA_API_KEY:\n      runtime.getSetting(\"ALLORA_API_KEY\") || process.env.ALLORA_API_KEY,\n    ALLORA_CHAIN_SLUG:\n      runtime.getSetting(\"ALLORA_CHAIN_SLUG\") || process.env.ALLORA_CHAIN_SLUG,\n  };\n\n  return ConfigSchema.parse(config);\n}\n","import type { TestSuite } from \"@elizaos/core\";\nimport plugin from \"../index.js\";\n\nexport const test: TestSuite = {\n  name: \"@elizaos-plugins/allora Plugin Tests\",\n  description: \"Basic tests for @elizaos-plugins/allora plugin\",\n  tests: [\n    {\n      name: \"Plugin has required structure\",\n      fn: async () => {\n        if (!plugin.name || !plugin.description || !plugin.actions) {\n          throw new Error(\"Plugin missing required fields\");\n        }\n      },\n    },\n    {\n      name: \"Actions are valid\",\n      fn: async () => {\n        const actions = plugin.actions || [];\n        if (actions.length === 0) {\n          throw new Error(\"Plugin has no actions\");\n        }\n        for (const action of actions) {\n          if (!action.name || !action.handler) {\n            throw new Error(\"Action missing required properties\");\n          }\n        }\n      },\n    },\n    {\n      name: \"Should validate action handlers can be called\",\n      fn: async (runtime: IAgentRuntime) => {\n        const plugin = await import('../index');\n        const actions = plugin.default?.actions || [];\n        \n        if (actions.length === 0) {\n          console.log(\"ℹ️  No actions to test\");\n          return;\n        }\n        \n        // Test that each action has required methods\n        for (const action of actions) {\n          if (typeof action.validate !== 'function') {\n            throw new Error(`Action ${action.name} missing validate method`);\n          }\n          \n          if (typeof action.handler !== 'function') {\n            throw new Error(`Action ${action.name} missing handler method`);\n          }\n          \n          console.log(`✓ Action ${action.name} has required methods`);\n        }\n        \n        console.log(\"✅ All action handlers validated\");\n      },\n    },\n  ],\n};\n\nexport default test;\n","import { type Plugin, type IAgentRuntime } from \"@elizaos/core\";\nimport { getInferenceAction } from \"./actions/getInference.js\";\nimport { topicsProvider } from \"./providers/topics.js\";\nimport { AlloraService } from \"./service.js\";\nimport test from \"./test/test.js\";\n\nconst alloraPlugin: Plugin = {\n  name: \"allora-network\",\n  description:\n    \"Allora Network plugin for fetching topic inferences and predictions from Allora Network\",\n  services: [AlloraService],\n  actions: [getInferenceAction],\n  providers: [topicsProvider],\n  tests: [test],\n  init: async (_config: Record<string, string>, _runtime: IAgentRuntime) => {\n    // Services are automatically registered from the services array\n  },\n};\n\nexport default alloraPlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger","content","elizaLogger","elizaLogger"]}